prototype(Sitegeist.Stencil.Grinder:Document) < prototype(Neos.Fusion:Component) {
    root = Sitegeist.Stencil.Grinder:DocumentCase

    renderer = Neos.Fusion:Case {
        shortcut {
            condition = ${q(node).is('[instanceof Neos.Neos:Shortcut]')}
            renderer = Sitegeist.Stencil.Grinder:Command {
                directive = 'REDIRECT'
                options {
                    target = Neos.Neos:NodeUri
                    status = 301
                }
            }
        }

        default {
            @position = 'end 99999999'
            condition = true
            renderer = Neos.Fusion:DataStructure {
                type = 'Sitegeist.Stencil.Grinder/v1/DOCUMENT'
                payload = Sitegeist.Stencil.Grinder:DocumentCase
            }
        }
    }
}

prototype(Sitegeist.Stencil.Grinder:Node) < prototype(Neos.Fusion:Component) {
    component = ''
    props = Neos.Fusion:DataStructure

    renderer = Neos.Fusion:DataStructure {
        type = 'Sitegeist.Stencil.Grinder/v1/NODE'
        payload = Neos.Fusion:DataStructure {
            component = ${props.component}
            props = ${props.props}
        }
    }
}

prototype(Sitegeist.Stencil.Grinder:Command) < prototype(Neos.Fusion:Component) {
    directive = ''
    options = Neos.Fusion:DataStructure

    renderer = Neos.Fusion:DataStructure {
        type = 'Sitegeist.Stencil.Grinder/v1/COMMAND'
        payload = Neos.Fusion:DataStructure {
            directive = ${props.directive}
            options = ${props.options}
        }
    }
}

//
// We cannot generate relative resource URIs via Neos yet, so here's a hack
//
prototype(Sitegeist.Stencil.Grinder:ImageUri) < prototype(Neos.Fusion:Component) {
    relative = false
    renderer = Neos.Neos:ImageUri {
        @apply.props = ${props}
        @process.makeRelative = ${String.pregReplace(value, '/http:\/\/[a-zA-Z0-9\-\.\:]+\//u', '/')}
        @process.makeRelative.@if.enabled = ${props.relative}
    }
}

prototype(Sitegeist.Stencil.Grinder:DocumentCase) < prototype(Neos.Fusion:Case) {
    prototypeForDocumentNodeExists {
        @position = 'end 99999998'
        condition = Neos.Fusion:CanRender {
            type = ${documentNode.nodeType.name}
        }
        type = ${documentNode.nodeType.name}
    }

    default {
        @position = 'end 99999999'
        condition = true
        renderer = Sitegeist.Stencil.Grinder:DefaultContent {
            node = ${documentNode}
        }
    }
}

prototype(Sitegeist.Stencil.Grinder:ContentCase) < prototype(Neos.Fusion:Case) {
    prototypeForContentNodeExists {
        @position = 'end 99999998'
        condition = Neos.Fusion:CanRender {
            type = ${node.nodeType.name}
        }
        type = ${node.nodeType.name}
    }

    default {
        @position = 'end 99999999'
        condition = true
        renderer = Sitegeist.Stencil.Grinder:DefaultContent {
            node = ${node}
        }
    }
}

prototype(Sitegeist.Stencil.Grinder:DefaultProperties)  < prototype(Neos.Fusion:Component) {
    node = ${node}
    renderer = Neos.Fusion:Map {
        items = ${props.node.nodeType.properties}
        items.@process.excludeMetaProperties = ${Array.filter(value, (_, key) => !String.startsWith(key, '_'))}

        itemRenderer= Neos.Fusion:Case {
            isImage {
                condition = ${item.type == 'Neos\\Media\\Domain\\Model\\ImageInterface'}
                renderer = Sitegeist.Stencil.Grinder:ImageUri {
                    asset = ${q(props.node).property(itemKey)}
                    relative = true
                }
            }

            default {
                @position = 'end 99999999'
                condition = true
                renderer = ${q(props.node).property(itemKey)}
            }
        }
    }
}

prototype(Sitegeist.Stencil.Grinder:DefaultChildren)  < prototype(Neos.Fusion:Component) {
    node = ${node}
    renderer = Neos.Fusion:Map {
        items = ${q(props.node).children('[instanceof Neos.Neos:Content],[instanceof Neos.Neos:ContentCollection]').get()}
        itemName = 'node'
        itemRenderer = Neos.Fusion:DataStructure {
            key = ${node.autocreated ? node.name : 'children'}
            value = Neos.Fusion:Case {
                collection {
                    @position = 10
                    condition = ${q(node).is('[instanceof Neos.Neos:ContentCollection]')}
                    renderer = Sitegeist.Stencil.Grinder:ContentCollection
                }
                content {
                    @position = 20
                    condition = ${q(node).is('[instanceof Neos.Neos:Content]')}
                    renderer = Sitegeist.Stencil.Grinder:ContentCase
                }
            }
        }

        @process.reduce = Neos.Fusion:Reduce {
            items = ${value}
            initialValue = ${{}}
            itemReducer = Neos.Fusion:Case {
                add {
                    condition = ${!carry[item.key]}
                    renderer = ${Array.set(carry, item.key, item.value)}
                }
                append {
                    condition = ${carry[item.key] != null}
                    renderer = ${Array.set(carry, item.key, Array.concat(carry[item.key].type ? [carry[item.key]] : carry[item.key], [item.value]))}
                }
            }
        }
    }
}

prototype(Sitegeist.Stencil.Grinder:DefaultContent) < prototype(Neos.Fusion:Component) {
    node = ${node}
    renderer = Sitegeist.Stencil.Grinder:Node {
        component = ${props.node.nodeType.name}
        props {
            @apply.properties = Sitegeist.Stencil.Grinder:DefaultProperties {
                node = ${props.node}
            }
            @apply.children = Sitegeist.Stencil.Grinder:DefaultChildren {
                node = ${props.node}
            }
        }
    }
}

prototype(Sitegeist.Stencil.Grinder:ContentCollection) < prototype(Neos.Fusion:Component) {
    node = ${node}
    nodePath = ''

    renderer = Neos.Fusion:Map {
        items = Neos.Fusion:Case {
            withNodePath {
                condition = ${!String.isBlank(props.nodePath)}
                renderer = ${q(props.node).children(props.nodePath).children().get()}
            }

            withoutNodePath {
                condition = ${String.isBlank(props.nodePath)}
                renderer = ${q(props.node).children().get()}
            }
        }
        itemName = 'node'
        itemRenderer = Sitegeist.Stencil.Grinder:ContentCase
    }
}

prototype(Sitegeist.Stencil.Grinder:Index) < prototype(Neos.Fusion:Component) {
    entries = ${indexEntries}

    renderer = Neos.Fusion:DataStructure {
        type = 'Sitegeist.Stencil.Grinder/v1/INDEX'
        count = ${Array.length(props.entries)}
        payload = Neos.Fusion:Map {
            items = ${props.entries}
            itemName = 'entry'
            itemRenderer = Sitegeist.Stencil.Grinder:IndexEntry
        }
    }
}

prototype(Sitegeist.Stencil.Grinder:IndexEntry) < prototype(Neos.Fusion:Component) {
    entry = ${entry}

    renderer = Neos.Fusion:DataStructure {
        type = 'Sitegeist.Stencil.Grinder/v1/INDEXENTRY'
        payload = Neos.Fusion:DataStructure {
            url = Neos.Fusion:UriBuilder {
                package = 'Sitegeist.Stencil.Grinder'
                subpackage = 'Application'
                controller = 'Grinder'
                action = 'document'
                arguments.node = ${props.entry}
            }
        }
    }
}

grinder = Sitegeist.Stencil.Grinder:Document
grinder-index = Sitegeist.Stencil.Grinder:Index
